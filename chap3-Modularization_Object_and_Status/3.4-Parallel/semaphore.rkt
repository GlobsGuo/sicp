#lang racket 
(require sicp)
(define (debug prefix . params) 
  (display prefix) 
  (newline)
  (for-each (lambda (x) (display x) (newline)) params))

(define (make-mutex)
  (let ((cell (list #f)))
	(define (the-mutex m)
	  (cond ((eq? m 'acquire)
			 (if (test-and-set! cell)
			   (the-mutex 'acquire)
			   'nothing))
			((eq? m 'release)
			 (clear! cell))))
	the-mutex))
(define (clear! cell)
  (set-car! cell false))

(define (test-and-set! cell)
  (if (car cell)
	#t
	(begin (set-car! cell #t)
		   #f)))

(define (make-semaphore n)
  (define (construct num)
	(if (= num 0)
	  '()
	  (cons (make-mutex) (construct (- num 1)))))
  (let ((semaphore (construct n)))
  (define (get-i-semaphore index)
	(if (= index 0)
	  (car semaphore)
	  (get-i-semaphore (- index 1) (cdr semaphore))))
  (define (the-semaphore i)
	(cond ((eq? m 'acquire)
		   ((get-i-semaphore i) 'acquire))
		  ((eq? m 'release)
		   ((get-i-semaphore i) 'acquire))))
  the-semaphore))

; make sempahore with test-and-set!
(define (make-semaphore-atom n)
  (let ((semaphore (list #f))
		(clients 0))
	(define (the-semaphore m)
	  (cond ((eq? m 'acquire)
			 (if (test-and-set! semaphore)
			   (the-semaphore 'acquire)
			   'nothing)
			 (cond ((> clients n)
					(clear! semaphore)
					(the-semaphore 'acquire))
				   (else
					 (set! clients (+ clients 1))
					 (clear! semaphore))))
			((eq? m 'release)
			 (if (test-and-set! semaphore)
			   (the-semaphore 'release)
			   'nothing)
			 (set! clients (- clients 1))
			 (clear! semaphore))))
	the-semaphore))

