#lang racket
(define (deriv expr var)
  (cond ((number? expr) 0)
		((variable? expr)
		 (if (same-variable? expr var) 1 0))
		((sum? expr)
		 (make-sum (deriv (addend expr) var)
				   (deriv (augend expr) var)))
		((product? expr)
		 (make-sum (make-product (deriv (multiplier expr) var)
								 (multiplicand expr))
				   (make-product (deriv (multiplicand expr) var)
								 (multiplier expr))))
		((exponentiation? expr)
		 (make-product (make-product (exponent expr)
									 (make-exponentiation 
									   (base expr) (- (exponent expr) 1)))
					   (deriv (base expr) var)))
		(else
		  (display "unknown expression"))))

(define (addend s) (cadr s))
(define (augend s) 
  (if (null? (cdddr s))
	(caddr s)
	(make-sum (caddr s) (cadddr s))))
;(define (augend s) (caddr s))
(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (product? x)
  (and (pair? x) (eq? (car x) '*)))
(define (multiplier p) (cadr p))
(define (multiplicand p) 
  (let ((first (caddr p))
		(rest (cdddr p)))
	(if (null? rest)
	  first
	  (make-product first (cadddr p)))))
;(define (multiplicand p) (caddr p))

(define (=number? x n)
  (and (number? x) (= x n)))
(define (sum? x)
  (and (pair? x) (eq? (car x) '+)))
(define (exponentiation? expr)
  (and (pair? expr) (eq? (car expr) '**)))
(define (base ex) (cadr ex))
(define (exponent ex) (caddr ex))

(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
		((=number? a2 0) a1)
		((and (number? a1) (number? a2)) (+ a1 a2))
		(else (list '+ a1 a2))))

(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
		((=number? m1 1) m2)
		((=number? m2 1) m1)
		((and (number? m1) (number? m2)) (* m1 m2))
		(else (list '* m1 m2))))

(define (make-exponentiation b e)
  (cond ((=number? e 0) 1)
		((=number? e 1) b)
		(else (list '** b e))))


(deriv '(** x 3) 'x)
(deriv '(* x y (+ x 3)) 'x)
(deriv '(** (+ x y) 8) 'y)

(deriv '(* x y (+ x 3)) 'x)

(define s1 (make-sum 'x 3))
(define s2 (make-sum s1 '(+ y 4)))
(define s3 (make-sum s2 s1))


