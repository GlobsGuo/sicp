#lang racket 
(require sicp)
(define (debug prefix . params) 
  (display prefix) 
  (newline)
  (for-each (lambda (x) (display x) (newline)) params))


(define (logical-not input)
  (cond ((= input 0) 1)
		((= input 1) 0)
		(else (debug "Invalid signal" input))))
(define (logical-and a1 a2)
  (cond ((and (= 1 a1) (= 1 a2)) 1)
		((or (and (= 1 a1) (= 0 a2))
			 (and (= 0 a1) (= 1 a2))
			 (and (= 0 a1) (= 0 a2))) 0)
		(else (debug "Invalid signal" a1 a2))))
(define (logical-or a1 a2 output)
  (cond ((and (= 0 a1) (= 0 a2)) 0)
		((or (and (= 1 a1) (= 0 a2))
			 (and (= 1 a1) (= 1 a2))
			 (and (= 0 a1) (= 1 a2))) 1)
		(else (debug "Invalid signal" a1 a2))))

(define (call-each procedures)
  (if (null? procedures)
	'done
	(begin ((car procedures)
			(call-each (cdr procedures))))))
(define (make-wire)
  (let ((signal-value 0)
		(action-procedures '()))
	(define (set-my-signal! new-value)
	  (if (not (= signal-value new-value))
		(begin (set! signal-value new-value)
			   (call-each action-procedures))
		'done))
	(define (accept-action-procedure! proc)
	  (set! action-procedures (cons proc action-procedures))
	  (proc))
	(define (dispatch m)
	  (cond ((eq? m 'get-signal) signal-value)
			((eq? m 'set-signal!) set-my-signal!)
			((eq? m 'add-action!) accept-action-procedure!)
			(else (debug "Unknown operation -- WIRE" m))))
	dispatch))
; syntactic sugar
(define (get-signal wire)
  (wire 'get-signal))
(define (set-signal! wire value)
  ((wire 'set-signal!) value))
(define (add-action! wire proc)
  ((wire 'add-action!) proc))

;; agenda
;; after initialization, agenda is '(0)
;; agenda in-use structure: time-seg1-seg2-seg3-...
; we need queue support here
(define (front-ptr queue) (car queue))
(define (rear-ptr queue) (cdr queue))
(define (set-front-ptr! queue item)
  (set-car! queue item))
(define (set-rear-ptr! queue item)
  (set-cdr! queue item))

(define (make-queue)
  (cons '() '()))
(define (empty-queue? queue)
  (null? (front-ptr queue)))
(define (front-queue queue)
  (if (empty-queue? queue)
	(debug "Queue is empty -- FRONT-QUEUE")
	(car (front-ptr queue))))

(define (insert-queue! queue item)
  (let ((new-item (cons item '())))
	(if (empty-queue? queue)
	  (begin (set-front-ptr! queue new-item)
			 (set-rear-ptr! queue new-item)
			 queue)
	  (begin (set-cdr! (rear-ptr queue) new-item)
			 (set-rear-ptr! queue new-item)
			 queue))))

(define (delete-queue! queue item)
  (if (empty-queue? queue)
	(debug "Queue is empty -- DELETE-QUEUE")
	(begin (set-front-ptr! queue (cdr (front-ptr queue)))
		   queue)))
				
; agenda-tool
(define (make-time-segment time queue) (cons time queue))
(define (segment-time s) (car s))
(define (segment-queue s) (cdr s))
; agenda constructor, selector and operator
(define (make-agenda) (list 0))
(define (current-time agenda) (car agenda))
(define (set-current-time! agenda time)
  (set-car! agenda time))
(define (segments agenda) (cdr agenda))
(define (set-segments! agenda segments)
  (set-cdr! agenda segments))
(define (first-segment agenda) (car (segments agenda)))
(define (rest-segments agenda) (cdr (segments agenda)))
(define (empty-agenda? agenda) (null? (segments agenda)))

(define (add-to-agenda! time action agenda)
  (define (belongs-before? segments)
	(or (null? segments)
		(< time (segment-time (car segments)))))
  (define (make-new-segment time action)
	(let ((q (make-queue)))
	  (insert-queue! q action)
	  (make-time-segment time q)))
  (define (add-to-segments! segments)
	(if (= (segment-time (car segments)) time)
	  (insert-queue! (segment-queue (car segments)) action)
	  (let ((rest (cdr segments)))
		(if (belongs-before? rest)
		  (set-cdr! segments 
					(cons (make-new-segment time action)
						  (cdr segments)))
		  (add-to-segments! rest)))))
  (let ((segments (segments agenda)))
	(if (belongs-before? segments)
	  (set-segments! agenda 
					 (cons (make-new-segment time action)
						   (cdr segments)))
	  (add-to-segments! segments))))

(define (remove-first-agenda-item! agenda)
  (let ((q (segment-queue (first-segment agenda))))
	(delete-queue! q)
	(if (empty-queue? q)
	  (set-segments! agenda (rest-segments agenda))
	  'ok)))

(define (first-agenda-item agenda)
  (if (empty-agenda? agenda)
	(debug "Agenda is empty -- FIRST-AGENDA-ITEM")
	(let ((first-seg (first-segment agenda)))
	  (set-current-time! agenda (segment-time first-seg))
	  (front-queue (segment-queue first-seg)))))

; initialize reference variable
(define the-agenda (make-agenda))
(define inverter-delay 2)
(define and-gate-delay 3)
(define or-gate-delay 5)


(define (after-delay time action)
  (add-to-agenda! (+ time (current-time the-agenda))
				  action
				  the-agenda))
(define (propagate)
  (if (empty-agenda! the-agenda)
	'done
	(let ((first-item (first-agenda-item the-agenda)))
	  (first-item)
	  (remove-first-agenda-item! the-agenda)
	  (propagate))))


(define (probe name wire)
  (add-action! wire
			   (lambda ()
				 (newline)
				 (display name)
				 (display "  ")
				 (display (current-time the-agenda))
				 (display "  New-value = ")
				 (display (get-signal wire)))))
(define input-1 (make-wire))
(define input-2 (make-wire))
(define sum (make-wire))
(define carry (make-wire))


(probe 'sum sum)
; inverter
(define (inverter input output)
  (define (invert-input)
	(let ((new-value (logical-not (get-signal input))))
	  (after-delay inverter-delay
				   (lambda ()
					 (set-signal! output new-value)))))
  (add-action! input invert-input)
  'ok)
; and-gate
(define (and-gate a1 a2 output)
  (define (and-action-procedure)
	(let ((new-value
			(logical-and (get-signal a1) (get-signal a2))))
	  (after-delay and-gate-delay
				   (lambda () 
					 (set-signal! output new-value)))))
  (add-action! a1 and-action-procedure)
  (add-action! a2 and-action-procedure)
  'ok)
; or-gate
(define (or-gate a1 a2 output)
  (define (or-action-procedure)
	(let ((new-value 
			(logical-or (get-signal a1) (get-signal a2))))
	  (after-delay or-gate-delay
				   (lambda ()
					 (set-signal! output new-value)))))
  (add-action! a1 or-action-procedure)
  (add-action! a2 or-action-procedure)
  'ok)
; complex or-gate
; delay: inverter-delay * 2 + and-gate-delay
(define (or-gate-complex a1 a2 output)
  (define (or-action-procedure)
	(let ((a1-output 0)
		  (a2-output 0)
		  (and-output 0))
	  (inverter a1 a1-output)
	  (inverter a2 a2-output)
	  (and-gate a1-output a2-output and-output)
	  (inverter and-output output)))
  (add-action! a1 or-action-procedure)
  (add-action! a2 or-action-procedure)
  'ok)


