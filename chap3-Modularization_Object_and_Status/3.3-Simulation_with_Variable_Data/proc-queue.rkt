#lang racket
(require sicp)
(define (debug x)
  (display x)
  (newline))

(define (make-queue)
  (let ((front-ptr nil)
		(rear-ptr nil))
;	(define queue (cons front-ptr rear-ptr))
;	(define (front-ptr) (car queue))
;	(define (rear-ptr) (cdr queue))
	(define (set-front-ptr! item)
	  (set! front-ptr item))
	(define (set-rear-ptr! item)
	  (set! rear-ptr item))

	(define (empty-queue?)
	  (null? front-ptr))
	(define (front-queue)
	  (if (empty-queue?)
		(debug "Queue is empty -- FRONT-QUEUE")
		(car front-ptr)))
	(define (insert-queue! item)
	  (let ((new-item (cons (item '()))))
		(display new-item)
		(if (empty-queue?)
		  (begin (set-front-ptr! new-item)
				 (set-rear-ptr! new-item)
				 front-ptr)
		  (begin (set-cdr! rear-ptr new-item)
				 (set-rear-ptr! new-item)
				 front-ptr))))
	(define (delete-queue!)
	  (if (empty-queue?)
		(debug "Queue is empty -- DELETE-QUEUE")
		(begin (set-front-ptr! (cdr front-ptr))
			   front-ptr)))
	(define (print-queue)
	  (display front-ptr))
	(define (dispatch m)
	  (cond ((eq? m 'empty-queue?) empty-queue?)
			((eq? m 'front-queue) front-queue)
			((eq? m 'insert-queue!) insert-queue!)
			((eq? m 'delete-queue!) delete-queue!)
			((eq? m 'print-queue) print-queue)
			(else (debug "Unsupported operation"))))
	dispatch))
						   
(define q1 (make-queue))
(q1 'empty-queue?)
(q1 'front-queue)
(q1 'print-queue)
