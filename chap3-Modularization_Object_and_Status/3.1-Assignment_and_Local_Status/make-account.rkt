#lang racket
(define (debug x)
  (display x)
  (newline))
(define (call-police x) 
  (if (= x 7)
	(debug "Police Called")
	x))
(define (make-account balance passwd)
  (let ((wrong-count 0))
	(define (withdraw amount)
	  (if (>= balance amount)
		(begin (set! balance (- balance amount))
			   balance)
		"Insufficient funds"))
	(define (deposit amount)
	  (set! balance (+ balance amount))
	  balance)
	(define (passwd-right? pw)
	  (if (eq? pw passwd)
		(begin (set! wrong-count 0)
			   true)
		(begin (set! wrong-count (+ wrong-count 1))
			   (debug "false") 
			   (call-police wrong-count)
			   false)))
	(define (make-joint acc old-passwd new-passwd)
	  ())
	(define (dispatch pw m)
	  (if (not (passwd-right? pw))
		(lambda(x) "Incorrect password")
		(cond ((eq? m 'withdraw) withdraw)
			  ((eq? m 'deposit) deposit)
			  ((eq? m 'make-joint) make-joint)
			  (else (debug "Unkown request -- MAKE-ACCOUNT")))))
	dispatch))

(define acc (make-account 100 'john))
((acc 'john 'withdraw) 20)
((acc 'j 'withdraw) 10)
((acc 'j 'withdraw) 10)
((acc 'j 'withdraw) 10)
((acc 'j 'withdraw) 10)
((acc 'j 'withdraw) 10)
((acc 'j 'withdraw) 10)
((acc 'j 'withdraw) 10)
((acc 'j 'withdrw) 10)


